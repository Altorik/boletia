// Code generated by mockery v2.42.0. DO NOT EDIT.

package storagemocks

import (
	bole "boletia/api/internal"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ICacheRepository is an autogenerated mock type for the ICacheRepository type
type ICacheRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, hash
func (_m *ICacheRepository) Get(ctx context.Context, hash string) ([]bole.Currency, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []bole.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]bole.Currency, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []bole.Currency); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bole.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, hash, data
func (_m *ICacheRepository) Set(ctx context.Context, hash string, data []bole.Currency) error {
	ret := _m.Called(ctx, hash, data)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []bole.Currency) error); ok {
		r0 = rf(ctx, hash, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICacheRepository creates a new instance of ICacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICacheRepository {
	mock := &ICacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
