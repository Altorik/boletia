// Code generated by mockery v2.42.0. DO NOT EDIT.

package storagemocks

import (
	bole "boletia/api/internal"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, criteria
func (_m *DatabaseRepository) Get(ctx context.Context, criteria bole.Criteria) ([]bole.Currency, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []bole.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bole.Criteria) ([]bole.Currency, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bole.Criteria) []bole.Currency); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bole.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bole.Criteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseRepository creates a new instance of DatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseRepository {
	mock := &DatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
