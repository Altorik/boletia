// Code generated by mockery v2.42.0. DO NOT EDIT.

package storagemocks

import (
	bole "boletia/internal"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository struct {
	mock.Mock
}

// Save provides a mock function with given fields: ctx, data
func (_m *DatabaseRepository) Save(ctx context.Context, data *bole.CurrencyData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bole.CurrencyData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCall provides a mock function with given fields: ctx, data
func (_m *DatabaseRepository) SaveCall(ctx context.Context, data bole.ApiCall) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveCall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bole.ApiCall) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabaseRepository creates a new instance of DatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseRepository {
	mock := &DatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
