// Code generated by mockery v2.42.0. DO NOT EDIT.

package apimocks

import (
	bole "boletia/internal"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CurrencyRepository is an autogenerated mock type for the CurrencyRepository type
type CurrencyRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *CurrencyRepository) Get(ctx context.Context) (*bole.CurrencyData, bole.ApiCall, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *bole.CurrencyData
	var r1 bole.ApiCall
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*bole.CurrencyData, bole.ApiCall, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *bole.CurrencyData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bole.CurrencyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bole.ApiCall); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bole.ApiCall)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCurrencyRepository creates a new instance of CurrencyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencyRepository {
	mock := &CurrencyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
